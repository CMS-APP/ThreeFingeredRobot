function dq = threedee(t , x, initialValues, simConfig, objConfig, timeConfig)


global f1 f2 f3 Io r l1 l2 l3 fd gs gt %Ks1 Ks2 Ks3 % from main
global dpt1 dpt2 dpt3 dwt1 dwt2 dwt3 Pc1 Pc2 Pc3
%global Dfi Dlxi Dlzi Dni Sn phi psi Det5 Det4 Dpt1 Dpt2 Dwt1 Dwt2 Dpt1o Dpt2o Dwt1o Dwt2o
global t_out x_out Pt1 Pt2 Pt3  % Out U F Lambda Poc1o Poc2o Poc3o 
global Nx1 Ny1 Nz1 Nx2 Ny2 Nz2 Nx3 Ny3 Nz3 % o1 o2 o3 o4 sphi Ny1e Nz1e Ny2e Nz2e Nx1e Nx2e Bpsi1 Bpsi2 Bphi1 Bphi2 Eul1 Eul2 K  % Out
global angz1s angz2s angz3s angy1s angy2s angy3s

global pmtm1 tm1

%% definitions

% Comes from qfDot - The finger angles
qf1     = x(1:4);           % 4x1
qf2     = x(5:8);           % 4x1
qf3     = x(9:12);          % 4x1

% Comes from poDot - The position of the object
po      = x(13:15);         % 3x1

% Comes from RoDot - The rotation of the object
n       = x(16:18);         % 3x1
o       = x(19:21);         % 3x1
a       = x(22:24);         % 3x1
Ro      = [n o a];             % 3x3

% Comes from sys1/sys2 - The change in finger angles 
qf1dot  = x(25:28);          % 4x1                   
qf2dot  = x(29:32);          % 4x1
qf3dot  = x(33:36);          % 4x1

% Comes from sys1/sys2 - The translational and rotational velocity of the object 
podot   = x(37:39);          % 3x1
wo      = x(40:42);          % 3x1

% Comes from psiPhiDot - The rolling distances of each of the fingers
phi1    = x(43);             % 1x1
psi1    = x(44);             % 1x1
phi2    = x(45);             % 1x1
psi2    = x(46);             % 1x1
phi3    = x(47);             % 1x1
psi3    = x(48);             % 1x1

%
xdot   = [qf1dot; qf2dot; qf3dot; podot; wo];      % 18x1

if simConfig.obj == 1
    % Cube
    nx1o = [1 ; 0 ; 0];
    ny1o = [0 ; 1 ; 0];
    nz1o = [0 ; 0 ; 1];
    
    nx2o = [-1; 0; 0];
    ny2o = [0;  -1; 0];
    nz2o = [0;  0; 1];
    
	% When using a value of nx3
    nx3o = [0;  1;  0];
    ny3o = [-1;  0;  0];
    nz3o = [0;  0;  1];
    
elseif simConfig.obj == 2
    % Trapezium
    nx1o = roty(-30*pi/180)*[1 ; 0 ; 0];
    ny1o = roty(-30*pi/180)*[0 ; 1 ; 0];
    nz1o = roty(-30*pi/180)*[0 ; 0 ; 1];
    
    nx2o = roty(-165*pi/180)*[1 ; 0 ; 0];
    ny2o = roty(-165*pi/180)*[0 ; 1 ; 0];
    nz2o = roty(-165*pi/180)*[0 ; 0 ; 1];
    
elseif simConfig.obj == 3    
    % Trapezium 2
    nx1o = roty(-30*pi/180) * [1 ; 0 ; 0];
    ny1o = roty(-30*pi/180) * [0 ; 1 ; 0];
    nz1o = roty(-30*pi/180) * [0 ; 0 ; 1];

    nx2o = rotz(40*pi/180)*roty(-165*pi/180)*[1 ; 0 ; 0];
    ny2o = rotz(40*pi/180)*roty(-165*pi/180)*[0 ; 1 ; 0];
    nz2o = rotz(40*pi/180)*roty(-165*pi/180)*[0 ; 0 ; 1];
end

% Estimated Measurements
% nx1oe = [1 ; 0 ; 0];    %roty(-30*pi/180)*[1 ; 0 ; 0];
% ny1oe = [0 ; 1 ; 0];    %roty(-30*pi/180)*[0 ; 1 ; 0];
% nz1oe = [0 ; 0 ; 1];    %roty(-30*pi/180)*[0 ; 0 ; 1];
% 
% nx2oe = [-1 ; 0 ; 0];   %roty(-165*pi/180)*[1 ; 0 ; 0];
% ny2oe = [0 ; 1 ; 0];    %roty(-165*pi/180)*[0 ; 1 ; 0];
% nz2oe = [0 ; 0 ; 1];   %roty(-165*pi/180)*[0 ; 0 ; 1];
% 
% nx3oe = [0 ; 1 ; 0];   %roty(-165*pi/180)*[1 ; 0 ; 0];
% ny3oe = [1 ; 0 ; 0];    %roty(-165*pi/180)*[0 ; 1 ; 0];
% nz3oe = [0 ; 0 ; 1];   %roty(-165*pi/180)*[0 ; 0 ; 1];


% dRo  = skew(wo)*Ro ;
% [k, ~] = equiaxis(Ro);      % Convert to vector angle

%% Kinematic parameters
% Maps joint velocities to finger tip velocities - rotational and
% translational

% Jacobian for both fingers
J1  = f1.jacob0(qf1');                                          % 6x4
J2  = f2.jacob0(qf2');                                          % 6x4
J3  = f3.jacob0(qf3');                                          % 6x4

% Split up the tranlational and rotational
Jv1 = J1(1:3,:);                                                % 3x4 - tranlational
Jw1 = J1(4:6,:);                                                % 3x4 - rotational

Jv2 = J2(1:3,:);                                                % 3x4
Jw2 = J2(4:6,:);                                                % 3x4

Jv3 = J3(1:3,:);                                                % 3x4
Jw3 = J3(4:6,:);                                                % 3x4

% Jv = [Jv1  Jv2  Jv3 zeros(3,6)];                                % 3x18
% Jw = [Jw1  Jw2  Jw3 zeros(3,6)];                                % 3x18

% Derivative of the jacobian - big one
dJ1 = four_dof_finger_JacobianDerivative(l1, [qf1 qf1dot]) ;    % 6x4
% Split up the tranlational and rotational
dJv1 = dJ1(1:3,:);                                              % 3x4
dJw1 = dJ1(4:6,:);                                              % 3x4

dJ2 = four_dof_finger_JacobianDerivative(l2, [qf2 qf2dot]) ;     % 6x4
dJv2 = dJ2(1:3,:);                                              % 3x4
dJw2 = dJ2(4:6,:);                                              % 3x4

dJ3 = four_dof_finger_JacobianDerivative(l3, [qf3 qf3dot]) ;     % 6x4
dJv3 = dJ3(1:3,:);                                              % 3x4
dJw3 = dJ3(4:6,:);                                              % 3x4

% Using jacobian to map joint velocities to fingertip velocities
dpt1 = Jv1*qf1dot;
dpt2 = Jv2*qf2dot;
dpt3 = Jv3*qf3dot;

dwt1 = Jw1*qf1dot;
dwt2 = Jw2*qf2dot;
dwt3 = Jw3*qf3dot;

% dpt = [dpt; [dpt1', dpt2', dpt3']];
% dwt = [dwt; [dwt1', dwt2', dwt3']];

% The translational velocities of the finger tips in relation to the object
% dpt1o = Ro'*Jv1*qf1dot;
% dpt2o = Ro'*Jv2*qf2dot;
% dpt3o = Ro'*Jv3*qf3dot;

% The rotational velocities of the finger tips in relation to the object
% dwt1o = Ro'*Jw1*qf1dot;
% dwt2o = Ro'*Jw2*qf2dot;
% dwt3o = Ro'*Jw3*qf3dot;

%% Position of Fingers
 
T1  = f1.fkine(qf1');                                            % 4x4
% Rt1 = T1(1:3,1:3);                                              % 3x3
pt1 = T1(1:3,4);                                                % 3x1

T2  = f2.fkine(qf2');                                            % 4x4
% Rt2 = T2(1:3,1:3);                                              % 3x3
pt2 = T2(1:3,4);                                               % 3x1

T3  = f3.fkine(qf3');                                            % 4x4
% Rt3 = T3(1:3,1:3);                                              % 3x3
pt3 = T3(1:3,4);                                               % 3x1

% Convert rotation to euler angles
% eul1 = rotm2eul(Rt1);
% eul2 = rotm2eul(Rt2);
% eul3 = rotm2eul(Rt3);

if (simConfig.obj == 1) || (simConfig.obj == 2) || (simConfig.obj == 3)
    % Translation into the reference frame from from object frame
    nx1 =   Ro * nx1o;
    ny1 =   Ro * ny1o;
    nz1 =   Ro * nz1o;
    
    nx2 =   Ro * nx2o;
    ny2 =   Ro * ny2o;
    nz2 =   Ro * nz2o;
    
    nx3 =   Ro * nx3o;
    ny3 =   Ro * ny3o;
    nz3 =   Ro * nz3o;
    
    [poc1, dpoc1, poc2, dpoc2, poc3, dpoc3, pc1, pc2, ... ,
        pc3] = calcContactPntPos(pt1, pt2, pt3, nx1, nx2, nx3, dpt1, dpt2, dpt3, po, wo, podot, r);
    
elseif simConfig.obj == 4
    pt1o  = po - pt1;
    nx1   = pt1o / norm(pt1o);
    pt2o  = po - pt2;
    nx2   = pt2o / norm(pt2o);
    
    [poc1, dpoc1, poc2, dpoc2, pc1, pc2, poc1o, poc2o] = calcContactPntPos(pt1, r, nx1, po, dpt1, wo, podot, pt2, nx2, dpt2, Ro);
    
    theta1 = atan2(poc1o(2),poc1o(1));
    phis1 = atan2(sqrt(poc1o(1)^2 + poc1o(2)^2),poc1o(3));
    
    theta2 = atan2(poc2o(2),poc2o(1));
    phis2 = atan2(sqrt(poc2o(1)^2 + poc2o(2)^2),poc2o(3));
    
    Roc1 = roty(pi/2 - phis1)*rotz(theta1 - pi);
    Roc2 = roty(pi/2 + phis2)*rotz(-theta2);
    
    Rc1 = Ro*Roc1;
    Rc2 = Ro*Roc2;
    
    ny1 = Rc1(:,2);
    ny2 = Rc2(:,2);
    nz1 = Rc1(:,3);
    nz2 = Rc2(:,3);
    
%     nx1e = Ro*nx1oe;
%     ny1e = Ro*ny1oe;
%     nz1e = Ro*nz1oe;
%     nx2e = Ro*nx2oe;
%     ny2e = Ro*ny2oe;
%     nz2e = Ro*nz2oe;
end

dnx1 = -skew(nx1) * wo;
dny1 = -skew(ny1) * wo;
dnz1 = -skew(nz1) * wo;

dnx2 = -skew(nx2) * wo;
dny2 = -skew(ny2) * wo;
dnz2 = -skew(nz2) * wo;

dnx3 = -skew(nx3) * wo;
dny3 = -skew(ny3) * wo;
dnz3 = -skew(nz3) * wo;

Phi1 = nx1' * pt1 + nx1' * r * nx1 - nx1' * po - nx1' * poc1;        % 1x1
Phi2 = nx2' * pt2 + nx2' * r * nx2 - nx2' * po - nx2' * poc2;        % 1x1
Phi3 = nx3' * pt3 + nx3' * r * nx3 - nx3' * po - nx3' * poc3;        % 1x1

Phi = [Phi1; Phi2; Phi3];                                        % 3x1

%% Dynamic parameters

% Mass and Coriolis of the fingers
Mf1 = f1.inertia(qf1');             % 4x4
Mf2 = f2.inertia(qf2');             % 4x4
Mf3 = f3.inertia(qf3');             % 4x4

Cf1 = f1.coriolis(qf1', qf1dot');    % 4x4
Cf2 = f2.coriolis(qf2', qf2dot');    % 4x4
Cf3 = f3.coriolis(qf3', qf3dot');    % 4x4

mass = [objConfig.mass 0 0;
        0 objConfig.mass 0;
        0 0 objConfig.mass];

% Mass of the object 
Mo  =   [mass       zeros(3,3); 
        zeros(3,3)  Io];

% Mass matrix of the fingers and object
M = [Mf1        zeros(4,4)  zeros(4,4)  zeros(4,6); % 18x18
     zeros(4,4) Mf2         zeros(4,4)  zeros(4,6);         
     zeros(4,4) zeros(4,4)  Mf3         zeros(4,6);
     zeros(6,4) zeros(6,4)  zeros(6,4)  Mo         ];
 
% Coriolis matrix of the fingers
C = [Cf1        zeros(4,4)  zeros(4,4)  zeros(4,6); % 18x18
     zeros(4,4)	Cf2         zeros(4,4)  zeros(4,6);        
     zeros(4,4)	zeros(4,4)  Cf3         zeros(4,6);  
     zeros(6,4) zeros(6,4)  zeros(6,4)  zeros(6,6)];

%% Constraints

% Contact contraint from paper
D11  = nx1' * Jv1;                                            % 1x4
dD11 = dnx1' * Jv1 + nx1' * dJv1;
D22  = nx2' * Jv2;                                            % 1x4
dD22 = dnx2' * Jv2 + nx2' * dJv2;
D33  = nx3' * Jv3;                                            % 1x4
dD33 = dnx3' * Jv3 + nx3' * dJv3;

D14  = [ -nx1'   nx1' * skew(poc1)];                          % 1x6
dD14 = [ -dnx1'  dnx1' * skew(poc1) + nx1' * skew(dpoc1)];

D24  = [ -nx2'   nx2' * skew(poc2)];
dD24 = [ -dnx2'  dnx2' * skew(poc2) + nx2' * skew(dpoc2)];

D34  = [ -nx3'   nx3' * skew(poc3)];
dD34 = [ -dnx3'  dnx3' * skew(poc3) + nx3' * skew(dpoc3)];
 
D =     [D11        zeros(1,4)  zeros(1,4)  D14; 
        zeros(1,4)	D22         zeros(1,4)  D24;     % 2x14 - 3x18
        zeros(1,4)	zeros(1,4) 	D33         D34];
    
Ddot =  [dD11       zeros(1,4)  zeros(1,4)  dD14; 
        zeros(1,4)  dD22        zeros(1,4)  dD24;     % 2x14 - 3x18
        zeros(1,4)	zeros(1,4)  dD33        dD34];
     
% Rolling constraints
A11  = [ny1' * Jv1 + r * nz1' * Jw1;                 % 2x4
        nz1' * Jv1 - r * ny1' * Jw1];
dA11 = [dny1' * Jv1 + ny1' * dJv1 + r * dnz1' * Jw1 + r * nz1' * dJw1;  % 2x4
        dnz1' * Jv1 + nz1' * dJv1 - r * dny1' * Jw1 - r * ny1' * dJw1];
   
A22  = [ny2' * Jv2 + r * nz2' * Jw2;                              % 2x4
        nz2' * Jv2 - r * ny2' * Jw2];
dA22 = [dny2' * Jv2 + ny2' * dJv2 + r * dnz2' * Jw2 + r * nz2' * dJw2;
        dnz2' * Jv2 + nz2' * dJv2 - r * dny2' * Jw2 - r * ny2' * dJw2];
  
A33  = [ny3' * Jv3 + r * nz3' * Jw3;                              % 2x4
        nz3' * Jv3 - r * ny3' * Jw3];
dA33 = [dny3' * Jv3 + ny3' * dJv3 + r * dnz3' * Jw3 + r * nz3' * dJw3;
        dnz3' * Jv3 + nz3' * dJv3 - r * dny3' * Jw3 - r * ny3' * dJw3];
    
A14  = [-ny1' ny1' * skew(poc1);                          % 2x6
        -nz1' nz1' * skew(poc1)];
dA14 = [-dny1' dny1' * skew(poc1) + ny1' * skew(dpoc1);
        -dnz1' dnz1' * skew(poc1) + nz1' * skew(dpoc1)];

A24  = [-ny2' ny2' * skew(poc2);                          % 2x6
        -nz2' nz2' * skew(poc2)];
dA24 = [-dny2' dny2' * skew(poc2) + ny2' * skew(dpoc2);
        -dnz2' dnz2' * skew(poc2) + nz2' * skew(dpoc2)];

A34  = [-ny3' ny3' * skew(poc3);                          % 2x6
        -nz3' nz3' * skew(poc3)];
dA34 = [-dny3' dny3' * skew(poc3) + ny3' * skew(dpoc3);
        -dnz3' dnz3' * skew(poc3) + nz3' * skew(dpoc3)];
    
A    = [A11         zeros(2,4)	zeros(2,4)  A14;          % 6x18
       zeros(2,4)	A22         zeros(2,4)  A24;
       zeros(2,4)   zeros(2,4)  A33         A34];

Adot = [dA11        zeros(2,4)	zeros(2,4)  dA14;          % 6x18
       zeros(2,4)   dA22        zeros(2,4)  dA24;
       zeros(2,4)   zeros(2,4)  dA33        dA34];

%% Controller
% finger shaping - how much the finger tips have moved on the surface of
% the object.

% nz1, ny1 - The vectors tangential to the normal force on the object
% dwt - angular velocity
% The rolling distance of each of the finger
psi1dot = nz1' * dwt1;
psi2dot = nz2' * dwt2;
psi3dot = nz3' * dwt3;

phi1dot = ny1' * dwt1;
phi2dot = ny2' * dwt2;
phi3dot = ny3' * dwt3;

ptm = (pt1 + pt2 + pt3) / 3;
vtm1 = ptm - pt1;
vtm2 = ptm - pt2;
vtm3 = ptm - pt3;

angz1 = asin(dot([pt1(1); pt1(3)], [vtm1(1); vtm1(3)]) / (norm([pt1(1); pt1(3)]) * norm([vtm1(1); vtm1(3)])));
angy1 = asin(dot([pt1(1); pt1(2)], [vtm1(1); vtm1(2)]) / (norm([pt1(1); pt1(2)]) * norm([vtm1(1); vtm1(2)])));

angz2 = asin(dot([pt2(1); pt2(3)], [vtm2(1); vtm2(3)]) / (norm([pt2(1); pt2(3)]) * norm([vtm2(1); vtm2(3)])));
angy2 = asin(dot([pt2(1); pt2(2)], [vtm2(1); vtm2(2)]) / (norm([pt2(1); pt2(2)]) * norm([vtm2(1); vtm2(2)])));

angz3 = asin(dot([pt3(1); pt3(3)], [vtm3(1); vtm3(3)]) / (norm([pt3(1); pt3(3)]) * norm([vtm3(1); vtm3(3)])));
angy3 = asin(dot([pt3(1); pt3(2)], [vtm3(1); vtm3(2)]) / (norm([pt3(1); pt3(2)]) * norm([vtm3(1); vtm3(2)])));

angz1s = [angz1; angz1s];
angz2s = [angz2; angz2s];
angz3s = [angz3; angz3s];
angy1s = [angy1; angy1s];
angy2s = [angy2; angy2s];
angy3s = [angy3; angy3s];

Nar1 = -r * Jw1' * (nz1 * sin(angz1 - gt * pi/180) + ny1 * sin(angy1 - gs * pi/180));
Nar2 = -r * Jw2' * (nz2 * sin(angz2 - gt * pi/180) + ny2 * sin(angy2 - gs * pi/180));
Nar3 = -r * Jw3' * (nz3 * sin(angz3 - gt * pi/180) + ny3 * sin(angy3 - gs * pi/180));

% Nar = [r*fd*Jw1'*[nz1 ny1]*[sin(phi1 - phi2 - phi3 - gt*pi/180); sin(psi1 - psi2 - psi3  - gs*pi/180)];
%        r*fd*Jw2'*[nz2 ny2]*[sin(phi1 - phi2 - phi3 - gt*pi/180); sin(psi1 - psi2 - psi3 - gs*pi/180)];
%        r*fd*Jw3'*[nz3 ny3]*[sin(phi1 - phi2 - phi3 - gt*pi/180); sin(psi1 - psi2 - psi3 - gs*pi/180)]
%        0;
%        0;
%        0;
%        0;
%        0;
%        0];

% u = [u1; u2; u3; zeros(6, 1)];

KvT = 5;
KvN = diag([KvT KvT KvT KvT]);
Kv  = [KvN          zeros(4,4)  zeros(4,4)  zeros(4,6);       
       zeros(4,4)   KvN         zeros(4,4)  zeros(4,6);
       zeros(4,4)   zeros(4,4)  KvN         zeros(4,6); 
       zeros(6,4)   zeros(6,4)  zeros(6,4)  zeros(6,6)]; 

% Multiply the dampening factor 'Kv' by xdot - xdot is the vector holding
% the derivates of the angles, position and rotation of object.
u = -Kv * xdot;

% The mid-point of all three points
ptm = (pt1 + pt2 + pt3) / 3;
tFactor = 1;
Jm = - (Jv1 + Jv2 + Jv3) / 3;

% ptm(3) = initialValues.p0(3);

% Translational controller
u1T = tFactor * fd * (Jv1' - Jm') * ((ptm - pt1) / norm(ptm - pt1));
u2T = tFactor * fd * (Jv2' - Jm') * ((ptm - pt2) / norm(ptm - pt2));
u3T = 0.8 * tFactor * fd * (Jv3' - Jm') * ((ptm - pt3) / norm(ptm - pt3));

% Rotational controller
f1Base = f1.base(1:3, 4);
f2Base = f2.base(1:3, 4);
f3Base = f3.base(1:3, 4);

theta1 = calculateVerticalAngle(pc1, pc2, pc3);
theta2 = calculateVerticalAngle(pc2, pc3, pc1);
theta3 = calculateVerticalAngle(pc3, pc1, pc2);

zeta1 = calcHorizontalAngle(f1Base, ptm, pc1);
zeta2 = calcHorizontalAngle(f2Base, ptm, pc2);
zeta3 = calcHorizontalAngle(f3Base, ptm, pc3);

rFactor = 1;

thetas = sum([abs(theta1), abs(theta2), abs(theta3)]);
zetas = sum([abs(zeta1), abs(zeta2), abs(zeta3)]);
[thetas, zetas, sum(thetas + zetas)]

% u1R = r * fd * Jw1' * ()

u1R = rFactor * r * fd * Jw1' * (nz1 * sin(theta1) + ny1 * sin(zeta1));
u2R = rFactor * r * fd * Jw2' * (-nz2 * sin(theta2) + ny2 * sin(zeta2));
u3R = rFactor * r * fd * Jw3' * (nz3 * sin(theta3) + ny3 * sin(zeta3));

avPsi = (psi1 + psi2 + psi3) / 3;
avPhi = (phi1 + phi2 + phi3) / 3;

u1R = rFactor * r * fd * Jw1' * (nz1 * sin(avPsi) + ny1 * sin(avPhi));
u2R = rFactor * r * fd * Jw2' * (nz2 * sin(avPsi) + ny2 * sin(avPhi));
u3R = rFactor * r * fd * Jw3' * (nz3 * sin(avPsi) + ny3 * sin(avPhi));

% Adding together translational and rotational controllers
u(1:4) = u(1:4) + u1T + u1R;
u(5:8) = u(5:8) + u2T + u2R;
u(9:12) = u(9:12) + u3T + u3R;

%% Closed Loop System

% Split into system 1 and system 2 to make the mathematics easier in Matlab

% Inertia of the fingers and object
system1 = [M     D'         A'    ;                                                                % 20x20 - 24x24
        D zeros(3,3) zeros(3,6);
        A zeros(6,3) zeros(6,6)];
    
alpha = 4.16*10^3;
beta = 4.16*10^3;
gamma = 100000;
    
system2 = [u - C * xdot; %- Bjw * Q * wrel;                                                        % 20x1 - 24x1
        -(Ddot + 2 * alpha * D) * xdot - beta^2 * Phi;
        -(Adot + 2 * gamma * A) * xdot];
   
qfdot = system1\system2;                                                                             % 20x1 - 24x1

RoDot = [ -skew(n) * wo;
          -skew(o) * wo;
          -skew(a) * wo];
      
% f      = qddot(19:21);                                                                        % 2x1
% lambda = qddot(22:27);                                                                        % 4x1

% O1 = D14' * f(1);
% O2 = D24' * f(2);
% O3 = A14' * lambda(1:2);
% O4 = A24' * lambda(3:4);
% 
% dfi     = [ f(1) + fd * nx1' * (pt2 - pt1) / norm(pt2 - pt1);                                 % 2x1
%             f(2) + fd * nx2' * (pt2 - pt1) / norm(pt2 - pt1)];
%         
% dlxi    = [ lambda(1) - fd * ny1' * (pt2 - pt1) / norm(pt2-pt1);                              % 2x1
%             lambda(3) + fd * ny2' * (pt2 - pt1) / norm(pt2-pt1)];
%         
% dlzi    = [ lambda(2) - fd * nz1' * (pt2 - pt1) / norm(pt2-pt1);                              % 2x1
%             lambda(4) + fd * nz2' * (pt2 - pt1) / norm(pt2-pt1)];
%         
% dni     = [  fd * (-ny1 * nz1' + nz1 * ny1') * (pt2 - pt1) / norm(pt2 - pt1) + Nardn(1:3);    % 6x1
%             -fd * (-ny2 * nz2' + nz2 * ny2') * (pt2 - pt1) / norm(pt2 - pt1) + Nardn(4:6)]; 
%         
% sn      = fd * (skew(poc1)' - skew(poc2)') * (pt2 - pt1) / norm(pt2 - pt1);                   % 3x1
% 
% Psi     = A * xdot;                                                                           % 4x1
% 

qfDot = [qf1dot; qf2dot; qf3dot];
psiPhiDot = [psi1dot; phi1dot; psi2dot; phi2dot; psi3dot; phi3dot];

dq = [qfDot; podot; RoDot ; qfdot(1:18); psiPhiDot];         % 48x1

timeConfig.t                = timeConfig.t + 1;
t_out(timeConfig.t,:)       = t(1); 
x_out(timeConfig.t,:)       = x;
% F(timeConfig.t,:)           = f; 
% Lambda(timeConfig.t,:)      = lambda; 
Pt1(timeConfig.t,:)         = pt1;
Pt2(timeConfig.t,:)         = pt2;
Pt3(timeConfig.t,:)         = pt3;
% U(timeConfig.t,:)           = u;
% Dfi(timeConfig.t,:)         = dfi;
% Dlxi(timeConfig.t,:)        = dlxi;
% Dlzi(timeConfig.t,:)        = dlzi;
% Dni(timeConfig.t,:)         = dni;
% Sn(timeConfig.t,:)          = sn;
% phi(timeConfig.t,:)         = Phi;
% psi(timeConfig.t,:)         = Psi; 
% Det5(timeConfig.t,:)        = det5;
% Det4(timeConfig.t,:)        = det4;

Pc1(timeConfig.t,:)         = pc1; %
Pc2(timeConfig.t,:)         = pc2; %
Pc3(timeConfig.t,:)         = pc3; %

% Dpt1(timeConfig.t,:)        = dpt1;
% Dpt2(timeConfig.t,:)        = dpt2;
% Dwt1(timeConfig.t,:)        = dwt1;
% Dwt2(timeConfig.t,:)        = dwt2;
% Dpt1o(timeConfig.t,:)       = dpt1o;
% Dpt2o(timeConfig.t,:)       = dpt2o;
% Dwt1o(timeConfig.t,:)       = dwt1o;
% Dwt2o(timeConfig.t,:)       = dwt2o;
% Poc1o(timeConfig.t,:)       = poc1o;
% Poc2o(timeConfig.t,:)       = poc2o;
% Poc3o(timeConfig.t,:)       = poc3o;
% o1(timeConfig.t,:)          = O1;
% o2(timeConfig.t,:)          = O2;
% o3(timeConfig.t,:)          = O3;
% o4(timeConfig.t,:)          = O4;
% sphi(timeConfig.t,:)        = Nar;

Nx1(timeConfig.t,:)         = nx1; %
Ny1(timeConfig.t,:)         = ny1; %
Nz1(timeConfig.t,:)         = nz1; %
Nx2(timeConfig.t,:)         = nx2; %
Ny2(timeConfig.t,:)         = ny2; %
Nz2(timeConfig.t,:)         = nz2; %
Nx3(timeConfig.t,:)         = nx3; %
Ny3(timeConfig.t,:)         = ny3; %
Nz3(timeConfig.t,:)         = nz3; %
% Ny1e(timeConfig.t,:)        = ny1e;
% Nz1e(timeConfig.t,:)        = nz1e;
% Ny2e(timeConfig.t,:)        = ny2e;
% Nz2e(timeConfig.t,:)        = nz2e;
% Nx1e(timeConfig.t,:)        = nx1e;
% Nx2e(timeConfig.t,:)        = nx2e;
% Bpsi1(timeConfig.t,:)       = bpsi1;
% Bpsi2(timeConfig.t,:)       = bpsi2;
% Bphi1(timeConfig.t,:)       = bphi1;
% Bphi2(timeConfig.t,:)       = bphi2;
% Eul1(timeConfig.t,:)        = eul1; 
% Eul2(timeConfig.t,:)        = eul2; 
% K(timeConfig.t,:)           = k; %

waitbar(t / timeConfig.tEnd, timeConfig.barHandle, sprintf('%.3f / %.3f', t, timeConfig.tEnd));
end

function [poc1, dpoc1, poc2, dpoc2, poc3, dpoc3, pc1, pc2, pc3] = calcContactPntPos(pt1, pt2, pt3, nx1, nx2, nx3, dpt1, dpt2, dpt3, po, wo, podot, r)
    
    poc1  = pt1 + r * nx1 - po;
    dpoc1 = dpt1 - r * skew(nx1) * wo - podot;
    
    poc2  = pt2 + r * nx2 - po;
    dpoc2 = dpt2 - r * skew(nx2) * wo - podot;
    
    poc3  = pt3 + r * nx3 - po;
    dpoc3 = dpt3 - r * skew(nx3) * wo - podot;
    
    pc1 = pt1 + r * nx1;
    pc2 = pt2 + r * nx2;
    pc3 = pt3 + r * nx3;
    
    % Calculating object frame from reference frame
%     poc1o = Ro' * poc1;
%     poc2o = Ro' * poc2;
%     poc3o = Ro' * poc3;
end


function zeta = calcHorizontalAngle(fBase, middle, pt)
    fBaseX = fBase(1);
    fBaseY = fBase(2);

    middleX = middle(1);
    middleY = middle(2);

    ptX = pt(1);
    ptY = pt(2);

    yDiffMid = middleY - fBaseY;
    xDiffMid = middleX - fBaseX;

    middleAngle = atan2(yDiffMid, xDiffMid);

    yDiffPoint = ptY - fBaseY;
    xDiffPoint = ptX - fBaseX;

    pointAngle = atan2(yDiffPoint, xDiffPoint);
    
    zeta = pointAngle - middleAngle;
    return 
end

function theta = calculateVerticalAngle(pc, pcOther1, pcOther2)
    pcx = pc(1);
    pcy = pc(2);
    pcz = pc(3);
    
    pcOtherMid = ( pcOther1 + pcOther2 ) / 2;
    pcOtherMidz = pcOtherMid(3);
    
    z1Diff = abs(pcOtherMidz - pcz); 
    
    pcOtherMidx = pcOtherMid(1);
    pcOtherMidy = pcOtherMid(2);
    xyDiff = sqrt((pcOtherMidx - pcx)^2 + (pcOtherMidy - pcy)^2);
    theta = atan2(z1Diff, xyDiff);
    return 
end